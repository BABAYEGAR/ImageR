@model CamerackStudio.Models.Entities.Image
@{
    Layout = "Layout/Dashboard/_LayoutForm";
    ViewBag.PageTitle = "Upload Image";
    ViewBag.FormHeader = "Upload an Image (Make sure to fill all compulsory fields *)";
}
@section css{

    <!-- Bootstrap Markdown-->
    <link rel="stylesheet" type="text/css" href="~/Dashboard/plugins/bootstrap-markdown/css/bootstrap-markdown.min.css">
    <link href="~/Dashboard/assets/selectize/dist/css/selectize.css" rel="stylesheet"/>
    <style>
        .fileinput-upload-button { visibility: hidden }

        .page-header { padding: 0px; }

        .selectize-input {
            border: 0px solid #d0d0d0;
            font-weight: bolder;
            padding: 0px 0px;
            width: 100%;
        }
    </style>
}
@section Breadcrumbs
{
    <div class="pull-left">
        <h4 class="mt-0 mb-5">@ViewBag.PageHeader</h4>
        <ol class="breadcrumb mb-0">
            <li>
                <a href="@Url.Action("Dashboard", "Home")">Dashboard</a>
            </li>
            <li>
                <a href="@Url.Action("Index")">Images</a>
            </li>
            <li class="active">@ViewBag.PageHeader</li>
        </ol>
    </div>
}
<div class="modal fade" id="myModal1" tabindex="-1" role="dialog" aria-labelledby="myModalLabel1">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="myModalLabel1">Add Camera</h4>
            </div>
            <form asp-controller="Camera" asp-action="Create" data-ajax="true" data-ajax-method="POST" data-ajax-update="#reloadCameraPartial" data-ajax-complete="onCameraComplete">
                <input type="hidden" name="Image" value="Redirect"/>
                    <div class="modal-body">

                        @Html.AntiForgeryToken()
                        <div class="form-body">
                            <div class="form-group">
                                @Html.Label("Name", "Name", new {@class = "control-label"})<span class="required">*</span>
                                @Html.Editor("Name", new {htmlAttributes = new {@class = "form-control", placeholder = "Please enter a camera used", required = "required"}})
                                @Html.ValidationMessage("Name", "", new {@class = "text-danger"})
                            </div>
                        </div>
                    </div>
                <div class="modal-footer">
                    <input type="submit" value="Submit" class="btn btn-success pull-right fa fa-check"/>
                    <input type="button" data-dismiss="modal" value="Cancel" class="btn btn-default pull-left"/>
                </div>
            </form>
        </div>
    </div>
</div>
<div class="modal fade" id="myModal2" tabindex="-1" role="dialog" aria-labelledby="myModalLabel2">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="myModalLabel2">Add Location</h4>
            </div>
            <form asp-controller="Location" asp-action="Create" data-ajax="true" data-ajax-method="POST" data-ajax-update="#reloadLocationPartial" data-ajax-complete="onLocationComplete">
                <input type="hidden" name="Image" value="Redirect"/>
                <div class="modal-body">

                    @Html.AntiForgeryToken()
                    <div class="form-body">
                        <div class="form-group">
                            @Html.Label("Name", "Name", new {@class = "control-label"})<span class="required">*</span>
                            @Html.Editor("Name", new {htmlAttributes = new {@class = "form-control", placeholder = "Please enter a location", required = "required"}})
                            @Html.ValidationMessage("Name", "", new {@class = "text-danger"})
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <input type="submit" value="Submit" class="btn btn-success pull-right fa fa-check"/>
                    <input type="button" data-dismiss="modal" value="Cancel" class="btn btn-default pull-left"/>
                </div>
            </form>
        </div>
    </div>
</div>


<div class="widget-body">
    <h4>
        <span class="required">*</span> Make sure to <strong class="annouce">upload an Image</strong> in the <strong class="required">next tab</strong> ..
    </h4>
    <h4>
        <span class="required">*</span> Note That the <strong class="annouce">Supported Formats</strong> for Image Uploads are <strong class="required">JPG,JPEG,TIFF,PNG</strong>..
    </h4>
    <div role="tabpanel">
        <ul role="tablist" class="nav nav-tabs nav-justified mb-15">
            <li role="presentation" class="active">
                <a id="home-tab5" href="#home5" role="tab" data-toggle="tab" aria-controls="home5" aria-expanded="true">
                    <h3>Image Details</h3>(Enter Image Details)
                </a>
            </li>
            <li role="presentation">
                <a id="profile-tab5" href="#profile5" role="tab" data-toggle="tab" aria-controls="profile5" aria-expanded="False">
                    <h3>Image Upload</h3> (Click to upload image)
                </a>
            </li>
        </ul>

        @using (Html.BeginForm("Create", "Image", FormMethod.Post, new {enctype = "multipart/form-data", role = "form"}))
        {
            <div class="tab-content">

                <div id="home5" role="tabpanel" aria-labelledby="home-tab5" class="tab-pane fade active in">
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new {@class = "text-danger"})

                    <div class="form-body">
                        <div class="row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.Title, new {@class = "control-label"})<span class="required">*</span>
                                @Html.EditorFor(model => model.Title, new {htmlAttributes = new {@class = "form-control", placeholder = "Please enter the image title"}})
                                @Html.ValidationMessageFor(model => model.Title, "", new {@class = "text-danger"})
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.Theme, new {@class = "control-label"})<span class="required">*</span>
                                @Html.EditorFor(model => model.Theme, new {htmlAttributes = new {@class = "form-control", placeholder = "Please enter the image theme"}})
                                @Html.ValidationMessageFor(model => model.Theme, "", new {@class = "text-danger"})
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.ImageCategoryId, new {@class = "control-label"})<span class="required">*</span>
                                @Html.DropDownListFor(model => model.ImageCategoryId, null, "Select an Image Category/Genre", new {@class = "form-control", placeholder = "", id = "category"})
                                @Html.ValidationMessageFor(model => model.ImageCategoryId, "", new {@class = "text-danger"})
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.ImageSubCategoryId, new {@class = "control-label"})
                                @Html.DropDownListFor(m => m.ImageSubCategoryId, new SelectList(string.Empty, "Value", "Text"), "--Please select a Sub-Category/ Sub-Genre--", new {@class = "form-control", id = "sub"})
                                @Html.ValidationMessageFor(model => model.ImageSubCategoryId, "", new {@class = "text-danger"})
                            </div>
                            @if (Model.CompetitionId != null)
                            {
                                <div class="form-group col-md-6">
                                    <label for="state">Upload Category</label><span class="required">*</span>
                                    <select name="state" class="form-control" id="statecategory" disabled="disabled">
                                        <option value="0">General Upload</option>
                                        <option value="1" selected>Competition Upload</option>
                                    </select>
                                </div>
                                <div class="form-group col-md-6" id="competition">
                                    @Html.LabelFor(model => model.CompetitionId, new {@class = "control-label"})<span class="required">*</span>
                                    @Html.DropDownListFor(model => model.CompetitionId, null, "Select an Image Category/Genre", new {@class = "form-control", placeholder = "",disabled = "disabled" })
                                    @Html.ValidationMessageFor(model => model.CompetitionId, "", new {@class = "text-danger"})
                                </div>
                            }
                            else
                            {
                                <div class="form-group col-md-6">
                                    <label for="state">Upload Category</label><span class="required">*</span>
                                    <select name="state" class="form-control" id="statecategory">
                                        <option value="0">General Upload</option>
                                        <option value="1">Competition Upload</option>
                                    </select>
                                </div>
                                <div class="form-group col-md-6" id="competition">
                                    @Html.LabelFor(model => model.CompetitionId, new {@class = "control-label"})<span class="required">*</span>
                                    @Html.DropDownListFor(model => model.CompetitionId, null, "Select an Image Category/Genre", new {@class = "form-control", placeholder = ""})
                                    @Html.ValidationMessageFor(model => model.CompetitionId, "", new {@class = "text-danger"})
                                </div>
                            }
                            <div class="form-group col-md-6" id="reloadLocationPartial">

                                @{
                                    Html.RenderPartial("Partials/_PartialImageLocation", Model);
                                }
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.Inspiration, new {@class = "control-label"})
                                @Html.EditorFor(model => model.Inspiration, new {htmlAttributes = new {@class = "form-control", placeholder = "Please enter the your inspiration for taking the image"}})
                                @Html.ValidationMessageFor(model => model.Inspiration, "", new {@class = "text-danger"})
                            </div>
                            <div class="form-group col-md-6" id="reloadCameraPartial">

                                @{
                                    Html.RenderPartial("Partials/_PartialImageCamera", Model);
                                }
                            </div>
                            <div class="form-group col-md-6">
                                <label for="state">Pricing Category</label><span class="required">*</span>
                                <select name="state" class="form-control" id="state">
                                    <option value="Free">Free</option>
                                    <option value="NotFree">Set Price</option>
                                </select>
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.SellingPrice, new {@class = "control-label"})<span style="font-weight: bolder" class="required">(N1000 - N500,000)*</span>
                                @Html.EditorFor(model => model.SellingPrice, new {htmlAttributes = new {@class = "form-control", placeholder = "Please enter the selling price for the image", min="1000" ,max="500000", value=0,id="price"}})
                                @Html.ValidationMessageFor(model => model.SellingPrice, "", new {@class = "text-danger"})
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.Discount, new {@class = "control-label"})<span style="font-weight: bolder" class="required"> (0.01% - 100%)</span>
                                @Html.EditorFor(model => model.Discount, new {htmlAttributes = new {@class = "form-control", placeholder = "Please enter the discount % for the image",min="0",max="100",id="discount"}})
                                @Html.ValidationMessageFor(model => model.Discount, "", new {@class = "text-danger"})
                            </div>
                            <div class="form-group col-md-12">
                                @Html.LabelFor(model => model.Tags, new {@class = "control-label"})
                                @Html.EditorFor(model => model.Tags, new {htmlAttributes = new {@class = "form-control", placeholder = "Please enter the tags for the image", id = "input-tags"}})
                                @Html.ValidationMessageFor(model => model.Tags, "", new {@class = "text-danger"})
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Description, new {@class = "control-label"})<span class="required">*</span>
                                <textarea name="Description" data-provide="markdown" rows="10" required="required"></textarea>
                                @Html.ValidationMessageFor(model => model.Description, "", new {@class = "text-danger"})
                            </div>
                        </div>

                    </div>

                </div>
                <div id="profile5" role="tabpanel" aria-labelledby="profile-tab5" class="tab-pane fade">
                    <div class="form-group">
                        <br/>
                        <br/>

                        <label class="col-sm-2 control-label">Image Upload</label>
                        <div class="col-sm-10">

                            <input id="input-5" name="file" type="file" multiple="" class="file-loading" required="required">
                            <p class="help-block">
                                Note that uploading large image sizes might take some more time to upload to the server at such please be patient, but a quick fix is to have a speedy internet connection.
                            </p>
                        </div>
                    </div>
                    <br/>
                    <br/>
                    <br/>
                    <br/>
                    <h4>
                        <strong>Image Print Supports up to 96 PPI/DPI</strong>
                    </h4>
                    <h5>Please make sure your image supports printing before selecting the appropriate Options</h5>
                    <div class="form-group">
                        <div class="form-group col-md-2">
                            @Html.LabelFor(model => model.A1, new {@class = "control-label"})
                            @*@Html.CheckBoxFor(model => model.A1, new {id = "checkA1" })*@
                            <input type="checkbox" name="A1" id="checkA1"/>
                            @Html.ValidationMessageFor(model => model.A1, "", new {@class = "text-danger"})
                        </div>
                        <div class="form-group col-md-2">
                            @Html.LabelFor(model => model.A2, new {@class = "control-label"})
                            @*@Html.CheckBoxFor(model => model.A2, new { id = "checkA2" })*@
                            <input type="checkbox" name="A2" id="checkA2"/>
                            @Html.ValidationMessageFor(model => model.A2, "", new {@class = "text-danger"})
                        </div>
                        <div class="form-group col-md-2">
                            @Html.LabelFor(model => model.A3, new {@class = "control-label"})
                            @*@Html.CheckBoxFor(model => model.A3, new {id = "checkA3" } )*@
                            <input type="checkbox" name="A3" id="checkA3"/>
                            @Html.ValidationMessageFor(model => model.A3, "", new {@class = "text-danger"})
                        </div>
                        <div class="form-group col-md-2">
                            @Html.LabelFor(model => model.A4, new {@class = "control-label"})
                            @*@Html.CheckBoxFor(model => model.A4,  new {id = "checkA4" } )*@
                            <input type="checkbox" name="A4" id="checkA4"/>
                            @Html.ValidationMessageFor(model => model.A4, "", new {@class = "text-danger"})
                        </div>
                        <div class="form-group col-md-2">
                            @Html.LabelFor(model => model.A5, new {@class = "control-label"})
                            @*@Html.CheckBoxFor(model => model.A5,new {id = "checkA5" } )*@
                            <input type="checkbox" name="A5" id="checkA5"/>
                            @Html.ValidationMessageFor(model => model.A5, "", new {@class = "text-danger"})
                        </div>
                        <div class="form-group col-md-2">
                            @Html.LabelFor(model => model.A6, new {@class = "control-label"})
                            @*@Html.CheckBoxFor(model => model.A6,  new {id = "checkA6" } )*@
                            <input type="checkbox" name="A6" id="checkA6"/>
                            @Html.ValidationMessageFor(model => model.A5, "", new {@class = "text-danger"})
                        </div>
                    </div>
                </div>


            </div>
            <br/>
            <div class="row">
                <button type="submit" class="btn btn-primary">
                    <i class="glyphicon glyphicon-upload"></i>
                    Submit
                </button>
                <a href="@Url.Action("Index", "Image")" class="btn btn-default">Cancel</a>
            </div>
        }
    </div >

</div>

@section Scripts
{
    <!-- Bootstrap Markdown-->
    <script type="text/javascript" src="~/Dashboard/plugins/bootstrap-markdown/js/bootstrap-markdown.js"></script>
    <script src="~/Dashboard/assets/selectize/dist/js/standalone/selectize.min.js"></script>

}

@section Functions {
    <script>
        $(document)
            .ready(function () {

                //set all checkboxes to false
                $('#checkA1').val('false');
                $('#checkA2').val('false');
                $('#checkA3').val('false');
                $('#checkA4').val('false');
                $('#checkA5').val('false');
                $('#checkA6').val('false');

                //disable price and discount if the set price option not selected
                var $state = $('#state'),
                    $price = $('#price');
                $discount = $('#discount');
                $price.val(0);
                $discount.val(0);
                $state.change(function() {
                    if ($state.val() == 'NotFree') {
                        $price.removeAttr('disabled');
                        $discount.removeAttr('disabled');
                        $price.val(0);
                        $discount.val(0);
                    } else {
                        $price.attr('disabled', 'disabled').val('');
                        $discount.attr('disabled', 'disabled').val('');
                        $price.val(0);
                        $discount.val(0);
                    }
                }).trigger('change'); // added trigger to calculate initial state

                //determine image upload type
                var statecategory = $('#statecategory'),
                    competition = $('#competition');
                competition.hide();
                statecategory.change(function () {
                    console.log(statecategory.val());
                    if (statecategory.val() == '0') {
                        competition.fadeOut(1000);
                    } if (statecategory.val() == '1') {
                        competition.fadeIn(1000);
                    }
                }).trigger('change'); // added trigger to calculate initial state

                //chnage to true/false on change action
                var checkA1 = $('#checkA1');
                checkA1.change(function() {
                    if (checkA1.val() == 'false') {
                        checkA1.attr('checked', 'checked').val('true');
                    } else {
                        checkA1.removeAttr('checked', 'checked').val('false');  
                    }
                });
                var checkA2 = $('#checkA2');
                checkA2.change(function() {
                    if (checkA2.val() == 'false') {
                        checkA2.attr('checked', 'checked').val('true');
                    } else {
                        checkA2.removeAttr('checked', 'checked').val('false');
                    }
                });
                var checkA3 = $('#checkA3');
                checkA3.change(function() {
                    if (checkA3.val() == 'false') {
                        checkA3.attr('checked', 'checked').val('true');
                    } else {
                        checkA3.removeAttr('checked', 'checked').val('false');
                    }
                });
                var checkA4 = $('#checkA4');
                checkA4.change(function() {
                    if (checkA4.val() == 'false') {
                        checkA4.attr('checked', 'checked').val('true');
                    } else {
                        checkA4.removeAttr('checked', 'checked').val('false');
                    }
                });
                var checkA5 = $('#checkA5');
                checkA5.change(function() {
                    if (checkA5.val() == 'false') {
                        checkA5.attr('checked', 'checked').val('true');
                    } else {
                        checkA5.removeAttr('checked', 'checked').val('false');
                    }
                });
                var checkA6 = $('#checkA6');
                checkA6.change(function() {
                    if (checkA6.val() == 'false') {
                        checkA6.attr('checked', 'checked').val('true');
                    } else {
                        checkA6.removeAttr('checked', 'checked').val('false');
                    }
                });



                //checks if the state has a value before displaying assigned category
                if ($('#category').val() != '') {
                    getSubCategories();
                }

                //loads assigned lga for state on change/select
                $('#category').on('change', function() { getSubCategories(); });

                //Ajax call for SUB assigned to state
                function getSubCategories() {

                    $("#sub").empty();
                    $.ajax({
                        type: 'GET',
                        url: '@Url.Action("GetSubForCategories", "Image")',
                        dataType: 'json',
                        data: { id: $("#category").val() },
                        success: function(sub) {

                            $.each(sub,
                                function(i, sub) {
                                    console.log(sub);
                                    $("#sub").append('<option value="' +
                                        sub.imageSubCategoryId +
                                        '">' +
                                        sub.name +
                                        '</option>');
                                });
                        },
                        error: function(ex) {
                            alert('Failed to retrieve Sub-Categories.' + ex);
                        }
                    });
                }

                //Ajax ends
            });

        // Selectize plugin
        $('#input-tags').selectize({
            delimiter: ',',
            persist: false,
            create: function(input) {
                return {
                    value: input,
                    text: input
                };
            }
        });
    </script>
    <script>
        $(document).ready(function() {
            $(".loadModal3").click(function() { // Click to only happen on announce links
                $('#myModal1').modal('show');
            });
        });
    </script>
    <script>
        $(document).ready(function() {
            $(".loadModal4").click(function() { // Click to only happen on announce links
                $('#myModal2').modal('show');
            });
        });
    </script>
    <script>
        var onCameraComplete = function() {
            $('#myModal1').modal('hide');
        };
        var onLocationComplete = function() {
            $('#myModal2').modal('hide');
        };
    </script>
}